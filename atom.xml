<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanzhaoyang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-16T12:31:12.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wanzhaoyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>客户端接入PushKit相关逻辑</title>
    <link href="http://yoursite.com/2017/08/11/19%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5PushKit%E7%9B%B8%E5%85%B3%E9%80%BB%E8%BE%91/"/>
    <id>http://yoursite.com/2017/08/11/19、客户端接入PushKit相关逻辑/</id>
    <published>2017-08-11T08:24:11.000Z</published>
    <updated>2017-10-16T12:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>最近项目中集成了音视频聊天，但是运营一段时间发现实际数据不是很理想，集中反应在音视频聊天的接通率特别低。通过研究微信等主流的音视频聊天的实现方式，发现在app进入后台以及app杀死的情况下，可以响铃及振动，而我们的app在后台或者app杀死的情况下只有push通知。通过调研，发现主流的音视频聊天都集成了VoIP push功能，可以实现在app杀死的情况下唤醒app，播放来电铃声。</p>
<h3 id="VoIP-push简介"><a href="#VoIP-push简介" class="headerlink" title="VoIP push简介"></a>VoIP push简介</h3><p>VoIP push是iOS 8.0引入的PushKit中的核心功能。能够在app未启动的状态下自动启动、app在后台启动app。与推送不同，VoIP并不会展示给用户，而是通过启动app，然后开发者在相关代理方法中发送本地推送的方式实现的。</p>
<h3 id="VoIP接入"><a href="#VoIP接入" class="headerlink" title="VoIP接入"></a>VoIP接入</h3><h4 id="1-配置证书"><a href="#1-配置证书" class="headerlink" title="1. 配置证书"></a>1. 配置证书</h4><p>这一部分网上可找到的资源有很多，在此只提供下面两张图片示意。注意，如果是项目相关证书已经生成了，不需要重新生成，VoIP push证书和APNS push证书类似功能类似。</p>
<p>步骤1:<br><img src="http://owu6yhfdg.bkt.clouddn.com/VoIP_step_01.png" alt="image"></p>
<p>步骤2:<br><img src="http://owu6yhfdg.bkt.clouddn.com/VoIP_step_02.png" alt="image"></p>
<p>剩下的步骤一步步操作即可完成。</p>
<h4 id="2-Xcode相关设置"><a href="#2-Xcode相关设置" class="headerlink" title="2. Xcode相关设置"></a>2. Xcode相关设置</h4><p>Xcode配置主要需要更新info.plist文件。具体包涵配置项如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;UIBackgroundModes&lt;/key&gt;</div><div class="line">&lt;array&gt;</div><div class="line">	&lt;string&gt;fetch&lt;/string&gt;</div><div class="line">	&lt;string&gt;remote-notification&lt;/string&gt;</div><div class="line">	&lt;string&gt;voip&lt;/string&gt;</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure>
<p>除此以外，还需要引入PushKit.framework。</p>
<h4 id="3-具体代码实现"><a href="#3-具体代码实现" class="headerlink" title="3. 具体代码实现"></a>3. 具体代码实现</h4><ul>
<li>在AppDelegate中导入头文件<figure class="highlight plain"><figcaption><span><pushkit pushkit.h="">```、遵循PKPushRegistryDelegate协议</pushkit></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 在- (BOOL)application:application didFinishLaunchingWithOptions:launchOptions中添加设置通知类型相关代码。这个并不是VoIP相关的，但前面我们说过，VoIP需要使用本地推送，这个是本地推送相关设置。</div></pre></td></tr></table></figure></li>
</ul>
<p>UIUserNotificationType types = (UIUserNotificationTypeBadge<br>                                    | UIUserNotificationTypeSound<br>                                    | UIUserNotificationTypeAlert);<br>UIUserNotificationSettings *notificationSettings = [UIUserNotificationSettings settingsForTypes:types categories:nil];<br>[[UIApplication sharedApplication] registerUserNotificationSettings:notificationSettings];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 在- (void)application:application didRegisterUserNotificationSettings:notificationSettings方法中注册PushKit实例并设置代理。</div></pre></td></tr></table></figure></p>
<p>PKPushRegistry *voipRegistry = [[PKPushRegistry alloc] initWithQueue:dispatch_get_main_queue()];<br>voipRegistry.delegate = self;<br>voipRegistry.desiredPushTypes = [NSSet setWithObject:PKPushTypeVoIP];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 最后，实现PKPushRegistryDelegate方法，包涵如下方法：</div></pre></td></tr></table></figure></p>
<ul>
<li>(void)pushRegistry:(PKPushRegistry <em>)registry didUpdatePushCredentials:(PKPushCredentials </em>)pushCredentials forType:(PKPushType)type;</li>
<li>(void)pushRegistry:(PKPushRegistry <em>)registry didReceiveIncomingPushWithPayload:(PKPushPayload </em>)payload forType:(PKPushType)type;</li>
<li>(void)pushRegistry:(PKPushRegistry *)registry didInvalidatePushTokenForType:(PKPushType)type;<br>```</li>
</ul>
<p>在didUpdatePushCredentials方法中，获取到pushCredentials.token并将token传递给server端，这里需要注意，传递给server端的token需要去处’&lt;’、’&gt;’、’ ‘;<br>didReceiveIncomingPushWithPayload方法是接收到VoIP push时执行的方法，主要包括展示本地通知，调起对应业务逻辑。</p>
<h4 id="4-push绑定与解绑"><a href="#4-push绑定与解绑" class="headerlink" title="4. push绑定与解绑"></a>4. push绑定与解绑</h4><p>在didUpdatePushCredentials方法中获取pushCredentials.token并将token传递给server端的操作实际上是一个绑定操作，通过该token可以唯一确定一个手机端。<br>解绑是告诉server该token不需要接收VoIP push。解绑操作视情况而定，通常VoIP使用强依赖于登录，这种场景下就需要进行解绑操作。</p>
<h3 id="CallKit相关技术"><a href="#CallKit相关技术" class="headerlink" title="CallKit相关技术"></a>CallKit相关技术</h3><p>PushKit主要在iOS8引入了VoIP功能，给唤醒app带来了极大的方便，尤其对于带有音视频通话功能的app提供了优秀的支持。而到了iOS系统，苹果提供了体验更棒的CallKit，相较PushKit而言，CallKit支持系统级别的童话界面、VoIP通话权限提升到了系统级别，当来电话时，VoIP通话不会被打断，除此之外，支持VoIP支持通话记录，可以通过通话记录唤醒app并进行音视频聊天。CallKit比PushKit对VoIP支持力度更大，功能更加完善，API调用也相对来说复杂一些。后续可以考虑结合PushKit和CallKit，系统在iOS 10+的机器支持CallKit，系统在iOS 8+的机器支持PushKit，完善app功能。不过引入CallKit也需要很慎重，毕竟CallKit支持到了系统级别，如果盲目引入影响到用户其他的核心体验，同样对用户的操作体验造成不好的影响。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h3&gt;&lt;p&gt;最近项目中集成了音视频聊天，但是运营一段时间发现实际数据不是很理想，集中反应在音视频聊天的接通率特别低。通过研究微信等主流的
    
    </summary>
    
    
      <category term="UI" scheme="http://yoursite.com/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>背景高斯模糊弹窗效果实现</title>
    <link href="http://yoursite.com/2017/07/22/18%E3%80%81%E8%83%8C%E6%99%AF%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E5%BC%B9%E7%AA%97%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/07/22/18、背景高斯模糊弹窗效果实现/</id>
    <published>2017-07-22T12:10:43.000Z</published>
    <updated>2017-09-27T13:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>最近设计同学对产品UI提升了要求，对所有的弹窗实现要求实现背景毛玻璃效果，举个例子，具体的效果图如下图所示。</p>
<p><img src="http://owu6yhfdg.bkt.clouddn.com/pic_01.png" alt="image"></p>
<p>根据设计的需求，系统的调研了当前主流的高斯模糊实现方案（参考），大致如下所示</p>
<ol>
<li>使用CoreImage</li>
<li>基于vImage </li>
<li>基于GPUImage</li>
<li>使用UIVisualEffectView（iOS 8.0 +）</li>
<li>使用UIToolbar的barStyle实现（iOS 7.0+）</li>
</ol>
<p>根据调研的结果，主流的高斯模糊使用CoreImage和vImage的居多。CoreImage高斯模糊的结果会有白边，白边的大小与模糊半径有关，而vImage不存在这种问题。UIVisualEffectView实现很简单，但是模糊程度特别高，不适用于类似弹窗的场景，且仅支持iOS8以上的设备。UIToolbar实现起来有些非主流，不采用。因此最终考虑从CoreImage和vImage两种方案中找一种实现。</p>
<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>由于CoreImage和vImage均是基于图片的高斯模糊。即要想获得模糊的，先获取当前屏幕展示画面的截图，然后通过算法对截图模糊，获取到所需要的图片，再将需要展示的弹窗显示出来。总体的流程如下所示：</p>
<p><img src="http://owu6yhfdg.bkt.clouddn.com/pic_04.png" alt="image"></p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>根据上述流程，该方案的实现共由两个关键步骤组成：</p>
<ol>
<li>屏幕截图</li>
<li>模糊图片生成</li>
</ol>
<p>屏幕截图的实现参考GitHub上面的一个开源方案，GitHub地址是<a href="https://github.com/shinydevelopment/SDScreenshotCapture" target="_blank" rel="external">https://github.com/shinydevelopment/SDScreenshotCapture</a>；模糊图片生成基于CoreImage和vImage分别有各自的实现，具体相关demo可以参考我在GitHub上面写的一个<a href="https://github.com/young0713/GaussianBlurBgProject" target="_blank" rel="external">demo:https://github.com/young0713/GaussianBlurBgProject</a>。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>根据上述设计提出的需求，最终做出来的效果如下图所示：</p>
<p><strong>模糊之前的UI</strong>：<br><img src="http://owu6yhfdg.bkt.clouddn.com/pic_02.PNG" alt="image"></p>
<p><strong>模糊之后的UI：</strong><br><img src="http://owu6yhfdg.bkt.clouddn.com/pic_03.PNG" alt="image"></p>
<p>实际效果和设计提出的需求一致。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://www.jianshu.com/p/6dd0eab888a6" target="_blank" rel="external">1. iOS开发探索-高斯模糊&amp;毛玻璃效果</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h3&gt;&lt;p&gt;最近设计同学对产品UI提升了要求，对所有的弹窗实现要求实现背景毛玻璃效果，举个例子，具体的效果图如下图所示。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="UI" scheme="http://yoursite.com/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>IM保持多活方案</title>
    <link href="http://yoursite.com/2017/07/09/17%E3%80%81IM%E4%BF%9D%E6%8C%81%E5%A4%9A%E6%B4%BB%E6%96%B9%E6%A1%88_todo/"/>
    <id>http://yoursite.com/2017/07/09/17、IM保持多活方案_todo/</id>
    <published>2017-07-09T07:23:11.000Z</published>
    <updated>2017-08-31T13:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="IM" scheme="http://yoursite.com/tags/IM/"/>
    
  </entry>
  
  <entry>
    <title>UIWebView URL拦截</title>
    <link href="http://yoursite.com/2017/06/16/16%E3%80%81UIWebView%20URL%E6%8B%A6%E6%88%AA_todo/"/>
    <id>http://yoursite.com/2017/06/16/16、UIWebView URL拦截_todo/</id>
    <published>2017-06-16T14:10:10.000Z</published>
    <updated>2017-08-31T13:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="H5" scheme="http://yoursite.com/tags/H5/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>router相关实现</title>
    <link href="http://yoursite.com/2017/05/20/15%E3%80%81router%E7%9B%B8%E5%85%B3%E5%AE%9E%E7%8E%B0_todo/"/>
    <id>http://yoursite.com/2017/05/20/15、router相关实现_todo/</id>
    <published>2017-05-20T08:25:11.000Z</published>
    <updated>2017-08-31T13:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Core ML近接触</title>
    <link href="http://yoursite.com/2017/04/30/14%E3%80%81Core%20ML%E8%BF%91%E6%8E%A5%E8%A7%A6_todo/"/>
    <id>http://yoursite.com/2017/04/30/14、Core ML近接触_todo/</id>
    <published>2017-04-30T04:20:14.000Z</published>
    <updated>2017-08-31T13:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前沿技术" scheme="http://yoursite.com/tags/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS如何写好单元测试</title>
    <link href="http://yoursite.com/2017/04/14/13%E3%80%81iOS%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95_todo/"/>
    <id>http://yoursite.com/2017/04/14/13、iOS如何写好单元测试_todo/</id>
    <published>2017-04-14T15:23:14.000Z</published>
    <updated>2017-08-31T13:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="单元测试" scheme="http://yoursite.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>react相关学习</title>
    <link href="http://yoursite.com/2017/03/25/12%E3%80%81react%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0_todo/"/>
    <id>http://yoursite.com/2017/03/25/12、react相关学习_todo/</id>
    <published>2017-03-25T03:27:20.000Z</published>
    <updated>2017-08-31T13:41:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>音视频相关学习指南</title>
    <link href="http://yoursite.com/2017/03/04/11%E3%80%81%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97_todo/"/>
    <id>http://yoursite.com/2017/03/04/11、音视频相关学习指南_todo/</id>
    <published>2017-03-04T07:30:11.000Z</published>
    <updated>2017-08-31T13:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="音视频" scheme="http://yoursite.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS集成React Native总结</title>
    <link href="http://yoursite.com/2017/02/18/10%E3%80%81iOS%E9%9B%86%E6%88%90React%20Native%E6%80%BB%E7%BB%93_todo/"/>
    <id>http://yoursite.com/2017/02/18/10、iOS集成React Native总结_todo/</id>
    <published>2017-02-18T05:45:11.000Z</published>
    <updated>2017-08-31T13:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>##一、安装及依赖项<br>1、安装Homebrew，用于安装Node.js<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL</code> <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="external">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”<br>2、安装Node.js</p>
<pre><code>brew install node
</code></pre><p>3、创建RN工程</p>
<pre><code>react-native init AwesomeProject
cd AwesomeProject
react-native run-ios
</code></pre><p>##二、能力<br>1、无需编译，只需要更新一下云端js代码，reload一下即可<br>2、Native组件标签化，布局代码采用JSX<br>3、Debug方便，修改了js以后，通过内建的node.js watcher编译成bundle，在模拟器里面按cmd+r就可以看到效果，大大提高开发效率<br>4、RN模块支持与原生模块互相调用，扩展性好<br>5、支持嵌入到现有APP中，混合开发 <a href="http://reactnative.cn/docs/0.45/integration-with-existing-apps.html#content" target="_blank" rel="external">http://reactnative.cn/docs/0.45/integration-with-existing-apps.html#content</a><br>6、发布时，所有JS打包到本地，默认支持离线<br>7、支持使用drawable／assets图片，网络图片需要指明明确的显示大小</p>
<p>##三、开发应具备知识<br>ES6<br>react<br>JSX<br>components【App的最终界面，也是各种各样的组件的组合】<br>state与props：props在父组件中指定，一经指定，在被指定的组件的生命周期中则不再改变。对于需要改变的数据，需要使用state<br>Flexbox布局</p>
<p>##四、RN动态更新（目前国内外有第三方服务，自己也能做）<br>js文件打包到jsBundle内<br>app检测是否有新版本的jsbundle，如果有则进行下载，保存到document<br>用户每次打开app都可以读取最新的bundle</p>
<p>##五、现在存在哪些问题<br>1、依赖于原声组件暴露出来的组件和方法，例如scrollView，在Native层是有大量事件的，scrollViewWillBeginDragging， scrollViewWillEndDragging，scrollViewDidEndDragging等等，这些事件在现有的版本都没有暴露，基本上做不了组件联动效果。<br>2、很多组件都是iOS only。DatePickerIOS、NavigatorIOS、PickerIOS、ProgressViewIOS、SegmentedControlIOS、TabBarIOS、TabBarIOS.Item、AlertIOS、ImagePickerIOS。很多情况下需要在不同平台写两套代码，不过最基本的核心控件都包括了<br>3、RN 自带的 ListView 是没有使用 Recycling 的，这样就使得 RN 无法使用大数据的长列表。如果你的 App 中使用无限加载或者多个较多数据的列表。那么你的 App 就会非常吃内存，卡死、甚至使得 App 闪退。第三方解决方案不完美解决该问题（FlatList组件：优化内存保持滑动流畅，列表在屏幕外异步绘制，因此存在问题是当滑动速度超过渲染速度时，先看到空白内容，设置initialNumToRender，初始绘制的元素数量）</p>
<p>##六、后续前景<br>1、Facebook造的轮子，而且现在在多个app（Instagram、Facebook）都在应用<br>2、受限于Apple store审核政策。目前有热更新方案，苹果目前的政策明确允许基于javascriptCore的热更新，但后续政策也可能改变。</p>
<p>##七、相关学习资料<br><a href="http://reactnative.cn/docs/0.45/getting-started.html#content" target="_blank" rel="external">1、中文官方教程，简单入门的教程，门槛比较低，上面的demo也比较简单</a><br><a href="https://github.com/crazycodeboy/RNStudyNotes" target="_blank" rel="external">2、React Native 研究与实践，结合实际开发经验，有相关教学视频，有demo，GitHub上star 1300+。包含构建官方example教程</a><br><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">3、React Native英文学习资料整理，内容较多较全，GitHub上star 13000+，学习曲线稍微有点陡</a><br><a href="http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="external">4、RN常见问题汇总</a><br><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="external">5、非常全，涉及到教程、非常多开源app等一系列内容</a><br><a href="http://www.ruanyifeng.com/blog/archives.html" target="_blank" rel="external">6、阮一峰的全栈教程</a><br><a href="https://segmentfault.com/a/1190000002678782" target="_blank" rel="external">7、RN分享</a><br><a href="http://www.infoq.com/cn/articles/jd-618-ReactNative-jingdong-practise?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=articles_link&amp;utm_content=link_text" target="_blank" rel="external">8、京东实践</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=401483604&amp;idx=1&amp;sn=399cdf7e13fe6125108de1bfd045f2cf&amp;scene=1&amp;srcid=0228wE75TF9Zqzny7mt7ZS3J&amp;key=710a5d99946419d9b9d0a316ddb898594e9089b1b29a8759cca5ff2407c204f72876180e08fd6c60d3816da7e4c39053&amp;ascene=0&amp;uin=Mjc3OTU3Nzk1&amp;devicetype=iMac%20MacBookPro10,1%20OSX%20OSX%2010.10.5%20build%2814F27%29&amp;version=11020201&amp;pass_ticket=m2YLRqjCZ5S4CHXKqIpGbkf59t1oYvRDZ6krGXEuDfWlQcoVj1p2g8gzHOEYrM9U" target="_blank" rel="external">9、ReactNative For Android 项目实战总结</a><br><a href="http://www.cnblogs.com/maomishen/p/5303976.html" target="_blank" rel="external">10、RN初步搭建及Bundle发布问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##一、安装及依赖项&lt;br&gt;1、安装Homebrew，用于安装Node.js&lt;br&gt;&lt;code&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Hom
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>cocoapods使用相关技巧</title>
    <link href="http://yoursite.com/2017/02/08/09%E3%80%81cocoapods%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E5%B7%A7_todo/"/>
    <id>http://yoursite.com/2017/02/08/09、cocoapods使用相关技巧_todo/</id>
    <published>2017-02-08T15:10:00.000Z</published>
    <updated>2017-08-31T13:41:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>一种基于YYCache的缓存设计机制</title>
    <link href="http://yoursite.com/2017/01/20/08%E3%80%81%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8EYYCache%E7%9A%84%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/01/20/08、一种基于YYCache的缓存设计机制/</id>
    <published>2017-01-20T15:21:20.000Z</published>
    <updated>2017-09-01T10:04:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>当前IM功能使用腾讯云IM SDK，从腾讯云IM获取的用户信息不全，非好友用户的用户名和头像信息必须通过网络请求异步获取，每次均网络请求获取消耗大量网络资源。因此，聊天用户信息有本地缓存的需求。后续还可能有其他本地缓存的需求。</p>
<h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ul>
<li>用户信息缓存独立于IM模块，IM模块只是用户信息的本地使用场景之一，还可用于其他业务场景；</li>
<li>具备通用可扩展性，不仅支持用户信息缓存，还应支持后续其他信息的缓存；</li>
<li>支持分账号缓存，实现不同账户缓存信息隔离；</li>
<li>使用LruCache，在缓存值到达预设定值时将最近最少使用的对象移除；</li>
<li>支持内存缓存和磁盘缓存。</li>
</ul>
<h3 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h3><p>经调研，目前iOS与android目前都有较好支持上述本地缓存的方案实现，只需要针对第三方方案做进一步的封装。以iOS端为例，YYCache能够较好的满足当前需求，具体特性如下（<a href="https://github.com/ibireme/YYCache）：" target="_blank" rel="external">https://github.com/ibireme/YYCache）：</a></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LRU</td>
<td>缓存支持 LRU (least-recently-used) 淘汰算法</td>
</tr>
<tr>
<td>缓存控制</td>
<td>支持多种缓存控制方法：总数量、总大小、存活时间、空闲空间</td>
</tr>
<tr>
<td>兼容性</td>
<td>API 基本和 NSCache 保持一致, 所有方法都是线程安全的</td>
</tr>
<tr>
<td>内存缓存</td>
<td>对象释放控制: 对象的释放(release) 可以配置为同步或异步进行，可以配置在主线程或后台线程进行;自动清空: 当收到内存警告或 App 进入后台时，缓存可以配置为自动清空。</td>
</tr>
<tr>
<td>磁盘缓存</td>
<td>可定制性: 磁盘缓存支持自定义的归档解档方法，以支持那些没有实现 NSCoding 协议的对象</td>
</tr>
</tbody>
</table>
<h3 id="iOS端方案实现"><a href="#iOS端方案实现" class="headerlink" title="iOS端方案实现"></a>iOS端方案实现</h3><p>首先是对YYCache的封装，提供SSCacheManager封装类，提供方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)configCacheStrategyWithName:(NSString *)name maxCount:(NSUInteger)count maxSize:(NSUInteger)size;</div><div class="line"></div><div class="line">- (void)objectForKey:(NSString *)key withCacheName:(NSString *)name resultBlock:(void (^)(id object))block;</div><div class="line"></div><div class="line">- (void)setObject:(id)object forKey:(NSString *)key withCacheName:(NSString *)name;</div><div class="line"></div><div class="line">- (void)removeObjectForKey:(NSString *)key withCacheName:(NSString *)name;</div><div class="line"></div><div class="line">- (void)removeAllObjectsWithCacheName:(NSString *)name;</div></pre></td></tr></table></figure>
<p>SSCacheManager实现不同用户的不同缓存信息分区，即<code>CacheWithName：</code>方法中将用户的OpenId，App的唯一标识BusinessId添加到缓存唯一标识中，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (YYCache *)cacheWithName:(NSString *)name</div><div class="line">&#123;</div><div class="line">    SInt64 selfOpenId = [SSLoginUserManager defaultManager].user.openId;</div><div class="line">    NSInteger businessId = SS_BusinessId;</div><div class="line">    NSString *cacheKey = [NSString stringWithFormat:@&quot;%@_%@_%@&quot;, @(businessId), @(selfOpenId), name];</div><div class="line">    </div><div class="line">    return [YYCache cacheWithName:cacheKey];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述实现了对YYCache的封装，按照软件架构设计分层思想，应当在此基础上封装业务层，用于具体处理对应的业务逻辑。下面将以缓存用户数据为实例，说明基于此的业务层的封装。对于用户信息管理类SSUserInfoManager，该业务层目标是快速方便增、删、改、查用户信息，提供接口如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 获取用户信息，获取不到才走网络请求</div><div class="line">- (void)getUserInfoWithUserOpenId:(SInt64)openId resultBlock:(void(^)(SSUserInfoModel *userInfo))block;</div><div class="line"></div><div class="line">// 缓存用户信息</div><div class="line">- (void)cacheUserInfo:(SSUserInfoModel *)userProfile;</div><div class="line"></div><div class="line">// 直接根据openId去cache用户信息，更新本地信息，并通过block的方式回调，网络请求失败的时候，也会去本地查缓存信息</div><div class="line">- (void)cacheUserInfoWithOpenId:(SInt64)openId resultBlock:(void (^)(SSUserInfoModel *))block;</div><div class="line"></div><div class="line">// 删除用户信息</div><div class="line">- (void)removeUserWithOpenId:(SInt64)openId;</div></pre></td></tr></table></figure>
<p><code>- getUserInfoWithUserOpenId: resultBlock:</code>方法和<code>- cacheUserInfoWithOpenId: resultBlock:</code>区别在于用户信息获取策略的优先级。第一个优先读取本地缓存，获取失败会走网络请求；第二个优先网络数据请求，请求失败走本地缓存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h3&gt;&lt;p&gt;当前IM功能使用腾讯云IM SDK，从腾讯云IM获取的用户信息不全，非好友用户的用户名和头像信息必须通过网络请求异步获取，每
    
    </summary>
    
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>多线程编程</title>
    <link href="http://yoursite.com/2016/12/25/07%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B_todo/"/>
    <id>http://yoursite.com/2016/12/25/07、多线程编程_todo/</id>
    <published>2016-12-25T08:20:33.000Z</published>
    <updated>2017-08-31T13:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>xcconfig相关使用技巧、环境变量定义</title>
    <link href="http://yoursite.com/2016/12/17/06%E3%80%81xcconfig%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E3%80%81%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89_todo/"/>
    <id>http://yoursite.com/2016/12/17/06、xcconfig相关使用技巧、环境变量定义_todo/</id>
    <published>2016-12-17T15:20:11.000Z</published>
    <updated>2017-08-31T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="环境" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>jsbridge</title>
    <link href="http://yoursite.com/2016/12/02/05%E3%80%81jsbridge_todo/"/>
    <id>http://yoursite.com/2016/12/02/05、jsbridge_todo/</id>
    <published>2016-12-02T15:04:10.000Z</published>
    <updated>2017-08-31T13:39:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="H5" scheme="http://yoursite.com/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>文本框输入的终极解决方案</title>
    <link href="http://yoursite.com/2016/11/25/04%E3%80%81%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E7%9A%84%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88_todo/"/>
    <id>http://yoursite.com/2016/11/25/04、文本框输入的终极解决方案_todo/</id>
    <published>2016-11-25T07:43:11.000Z</published>
    <updated>2017-08-31T13:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="UI" scheme="http://yoursite.com/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>iOS app上架流程详细指南</title>
    <link href="http://yoursite.com/2016/11/12/03%E3%80%81iOS%20app%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97_todo/"/>
    <id>http://yoursite.com/2016/11/12/03、iOS app上架流程详细指南_todo/</id>
    <published>2016-11-12T14:13:00.000Z</published>
    <updated>2017-08-31T13:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于push</title>
    <link href="http://yoursite.com/2016/11/06/02%E3%80%81%E5%85%B3%E4%BA%8Epush_todo/"/>
    <id>http://yoursite.com/2016/11/06/02、关于push_todo/</id>
    <published>2016-11-06T06:25:33.000Z</published>
    <updated>2017-09-01T01:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="what-is-this-article-for"><a href="#what-is-this-article-for" class="headerlink" title="what is this article for"></a>what is this article for</h3><p>工</p>
<h3 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h3><p>我</p>
<h3 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h3><p>总</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;what-is-this-article-for&quot;&gt;&lt;a href=&quot;#what-is-this-article-for&quot; class=&quot;headerlink&quot; title=&quot;what is this article for&quot;&gt;&lt;/a&gt;what is this a
    
    </summary>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>统一资源定位符(URL)</title>
    <link href="http://yoursite.com/2016/11/01/01%E3%80%81%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6(URL)/"/>
    <id>http://yoursite.com/2016/11/01/01、统一资源定位符(URL)/</id>
    <published>2016-11-01T11:11:20.000Z</published>
    <updated>2017-09-19T07:07:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关基础知识点"><a href="#相关基础知识点" class="headerlink" title="相关基础知识点"></a>相关基础知识点</h3><ol>
<li>统一资源定位符的完整格式如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</div></pre></td></tr></table></figure>
<ol>
<li>通常，访问路径不需要传递user和password，此时为对应的标准格式，如下所示：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scheme:[//host[:port]][/path][?query][#fragment]</div></pre></td></tr></table></figure>
<ol>
<li>各部分含义如下,以（<a href="http://www.baidu.com:80/2017/08/10?username=wan&amp;userkey=8dsu1dnswq1kak2k#personpage/user）为例" target="_blank" rel="external">http://www.baidu.com:80/2017/08/10?username=wan&amp;userkey=8dsu1dnswq1kak2k#personpage/user）为例</a></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scheme:http</div><div class="line">host:www.baidu.com</div><div class="line">port:80</div><div class="line">path:2017/08/10</div><div class="line">query:username=wan&amp;userkey=8dsu1dnswq1kak2k</div><div class="line">fragment:personpage/user</div></pre></td></tr></table></figure>
<h3 id="NSURL相关字段"><a href="#NSURL相关字段" class="headerlink" title="NSURL相关字段"></a>NSURL相关字段</h3><p>一个合法的NSURL，都可以获取到对应的scheme、resourceSpecifier、host、port、user、password、path、fragment、parameterString、query、relativePath</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@property (nullable, readonly, copy) NSString *absoluteString;</div><div class="line">@property (readonly, copy) NSString *relativeString; </div><div class="line">@property (nullable, readonly, copy) NSURL *baseURL;</div><div class="line">@property (nullable, readonly, copy) NSURL *absoluteURL;</div><div class="line">@property (nullable, readonly, copy) NSString *scheme;</div><div class="line">@property (nullable, readonly, copy) NSString *resourceSpecifier;</div><div class="line">@property (nullable, readonly, copy) NSString *host;</div><div class="line">@property (nullable, readonly, copy) NSNumber *port;</div><div class="line">@property (nullable, readonly, copy) NSString *user;</div><div class="line">@property (nullable, readonly, copy) NSString *password;</div><div class="line">@property (nullable, readonly, copy) NSString *path;</div><div class="line">@property (nullable, readonly, copy) NSString *fragment;</div><div class="line">@property (nullable, readonly, copy) NSString *parameterString;</div><div class="line">@property (nullable, readonly, copy) NSString *query;</div><div class="line">@property (nullable, readonly, copy) NSString *relativePath;</div></pre></td></tr></table></figure>
<h3 id="使用NSURLComponents生成NSURL"><a href="#使用NSURLComponents生成NSURL" class="headerlink" title="使用NSURLComponents生成NSURL"></a>使用NSURLComponents生成NSURL</h3><ol>
<li>首先是初始化NSURLComponents对象，可以通过NSURL或者通过URLString去初始化</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (nullable instancetype)initWithURL:(NSURL *)url resolvingAgainstBaseURL:(BOOL)resolve;</div><div class="line">- (nullable instancetype)initWithString:(NSString *)URLString;</div></pre></td></tr></table></figure>
<ol>
<li>NSURLComponents提供了对上述NSURL操作的所有参数，可以单独对某一个参数进行赋值。此外，NSURLComponents提供了一个新的参数类型queryItems，通过设置这个可以批量设置query参数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nullable, copy) NSArray&lt;NSURLQueryItem *&gt; *queryItems NS_AVAILABLE(10_10, 8_0);</div></pre></td></tr></table></figure>
<p>具体操作方式如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSURLQueryItem *item0 = [NSURLQueryItem queryItemWithName:itemKey0 value:itemValue0];</div><div class="line">NSURLQueryItem *item1 = [NSURLQueryItem queryItemWithName:itemKey1 value:itemValue1];</div><div class="line">NSArray *queryItems = @[item0, item1];</div><div class="line">[components setQueryItems:queryItems];</div></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>需求如下，有一个下发的H5链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://test.h5.tianshishow.cn/homepage/my#/invitation/index</div></pre></td></tr></table></figure>
<p>要求访问前自动补齐通用参数，需要添加的参数如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    AppVersion = &quot;3.2.0&quot;;</div><div class="line">    ClientSysType = 1;</div><div class="line">    UserOpenId = 307163;</div><div class="line">    Version = &quot;3.2.0&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加上述参数后的url为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://test.h5.tianshishow.cn/homepage/my?UserOpenId=307163&amp;Version=3.2.0&amp;AppVersion=3.2.0&amp;ClientSysType=1#/invitation/index</div></pre></td></tr></table></figure>
<p>根据上面的描述，首先封装一个获取所有通用参数的方法，然后遍历参数字典，生成多个NSURLQueryItem类型对象，将这些对象与url原有的query参数合并。代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (NSDictionary *)urlParams</div><div class="line">&#123;</div><div class="line">    SSUserProfileModel *userProfile = [SSLoginUserManager defaultManager].user;</div><div class="line">    NSString *sdkVersion = [QYLiveEngine sharedInstance].sdkVersion;</div><div class="line">    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@&quot;CFBundleShortVersionString&quot;];</div><div class="line">    </div><div class="line">    return @&#123;@&quot;Version&quot; : sdkVersion,</div><div class="line">             @&quot;AppVersion&quot; : appVersion,</div><div class="line">             @&quot;ClientSysType&quot; : [@1 stringValue],</div><div class="line">             @&quot;UserOpenId&quot; : [@(userProfile.openId) stringValue]&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSURL *)addQueryParams:(NSDictionary *)params toUrl:(NSURL *)url</div><div class="line">&#123;</div><div class="line">    if (!params || ![params count]) return url;</div><div class="line">    </div><div class="line">    NSURLComponents *components = [NSURLComponents componentsWithURL:url resolvingAgainstBaseURL:NO];</div><div class="line">    NSArray *oldQueryItems = [components queryItems];</div><div class="line">    NSMutableArray *newQueryItems = [NSMutableArray arrayWithArray:oldQueryItems];</div><div class="line">    </div><div class="line">    [params enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</div><div class="line">        NSString *itemKey = [NSString stringWithFormat:@&quot;%@&quot;, key];</div><div class="line">        NSString *itemValue = [NSString stringWithFormat:@&quot;%@&quot;, obj];</div><div class="line">        NSURLQueryItem *item = [NSURLQueryItem queryItemWithName:itemKey value:itemValue];</div><div class="line">        [newQueryItems addObject:item];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    [components setQueryItems:[newQueryItems copy]];</div><div class="line">    </div><div class="line">    return [components URL];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关基础知识点&quot;&gt;&lt;a href=&quot;#相关基础知识点&quot; class=&quot;headerlink&quot; title=&quot;相关基础知识点&quot;&gt;&lt;/a&gt;相关基础知识点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;统一资源定位符的完整格式如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
